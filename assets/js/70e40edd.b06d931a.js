"use strict";(self.webpackChunksimply_csv_docs=self.webpackChunksimply_csv_docs||[]).push([[4717],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},i=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||s;return r?n.createElement(f,l(l({ref:t},i),{},{components:r})):n.createElement(f,l({ref:t},i))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,l=new Array(s);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},682:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const s={sidebar_position:2},l="Create a template programmatically",o={unversionedId:"Developers/create-template",id:"Developers/create-template",title:"Create a template programmatically",description:"The following codes create a template and saves it.",source:"@site/docs/Developers/create-template.md",sourceDirName:"Developers",slug:"/Developers/create-template",permalink:"/docs/Developers/create-template",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Developers/create-template.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create API Credentials",permalink:"/docs/Developers/create-api"},next:{title:"List templates programmatically",permalink:"/docs/Developers/list-templates"}},p={},c=[],i={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-template-programmatically"},"Create a template programmatically"),(0,a.kt)("p",null,"The following codes create a template and saves it.\nThe store function is where all the magic happens."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function store(Request $request)\n    {\n        //\n        // authorize\n        // $this->authorize($this->abilityName(__FUNCTION__), Template::class);\n\n        // logger_debug( pr($request->all(), true), []);\n\n        // rules\n        $rules = [\n            'name' => ['required', new MaxVarchar()],\n            'key_as_header' => ['required', 'boolean']\n        ];\n\n        // validate\n        $this->validate($request, $rules);\n\n        // init\n        $res = [\n            'status'=>'danger',\n            'message'=>'Template saving failed!',\n        ];\n\n        //user\n        $user = current_user('api');\n\n        try{\n            // template data\n            $templateData = [\n                'name' => $request->get('name'),\n                'key_as_header' => $request->get('key_as_header', false)\n            ];\n\n            // create\n            if( $request->filled('uuid') ){\n                //\n                $template = get_user_template($user, $request->get('uuid'));\n\n                //\n                foreach( $templateData as $column => $value ){\n                    $template->{$column} = $value;\n                }\n\n                //\n                $template->save();\n            }else{\n                $template = $user->templates()->save( new \\App\\Models\\Template( $templateData ) );\n            }\n\n            //\n            $res = [\n                'status'=>'success',\n                'message'=>'Template saved successfully',\n            ];\n\n            //\n            $res['data'] = new TemplateResource($template);\n\n        }catch( Exception $e ){\n            $res['message'] .= ' ' . $e->getMessage();\n        }\n\n        return response()->json($res);\n    }\n")))}m.isMDXComponent=!0}}]);